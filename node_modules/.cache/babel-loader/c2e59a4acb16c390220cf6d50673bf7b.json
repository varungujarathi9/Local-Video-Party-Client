{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aravind/Documents/projects/Local-Video-Party-Client/client/src/components/VideoPlayer.jsx\";\n// TODO: got back to lobby when creator goes back--DONE\n// TODO: leave room\n// TODO: check file duration of all members\n// TODO: create a ready button for joinee\nimport { navigate } from '@reach/router';\nimport React from 'react';\nimport ReactPlayer from 'react-player';\nimport { serverSocket } from './helper/connection';\nimport { createPeerConnection, startPlaying } from './SimplePeer.js';\nexport default class VideoPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.vidOnPause = () => {\n      if (this.state.lastUpdatedBy === sessionStorage.getItem('username')) {\n        let pauseDetails = {\n          'roomID': sessionStorage.getItem('room-id'),\n          'playing': false,\n          'progressTime': this.state.videoPlayer.getCurrentTime(),\n          'username': sessionStorage.getItem('username'),\n          'exited': false\n        };\n        serverSocket.emit('video-update', {\n          pauseDetails: pauseDetails\n        });\n        console.log('paused');\n      }\n\n      this.setState({\n        lastUpdatedBy: sessionStorage.getItem('username'),\n        playing: false,\n        secondsPlayed: this.state.videoPlayer.getCurrentTime()\n      });\n    };\n\n    this.vidOnPlay = () => {\n      if (this.state.lastUpdatedBy === sessionStorage.getItem('username')) {\n        let pauseDetails = {\n          'roomID': sessionStorage.getItem('room-id'),\n          'playing': true,\n          'progressTime': this.state.videoPlayer.getCurrentTime(),\n          'username': sessionStorage.getItem('username'),\n          'exited': false\n        };\n        serverSocket.emit('video-update', {\n          pauseDetails: pauseDetails\n        });\n        console.log('played');\n      }\n\n      this.setState({\n        lastUpdatedBy: sessionStorage.getItem('username'),\n        playing: true,\n        secondsPlayed: this.state.videoPlayer.getCurrentTime()\n      });\n    };\n\n    this.handleRef = player => {\n      this.setState({\n        videoPlayer: player\n      }); // if (sessionStorage.getItem(\"user-type\") === \"creator\"){\n      //     console.log(this.videoPlayerRef.current)\n      //     getLocalStream(this.videoPlayerRef.current);\n      // }\n    };\n\n    this.ready = () => {\n      if (sessionStorage.getItem('user-type') === \"creator\") {\n        console.log(\"CREATING STREAM\");\n        setTimeout(() => {\n          startPlaying();\n        }, 3000);\n      }\n    };\n\n    this.state = {\n      playing: false,\n      secondsPlayed: 0,\n      lastUpdatedBy: sessionStorage.getItem('username'),\n      videoPlayer: null,\n      videoStreamFlag: true\n    };\n    this.videoPlayerRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    if (sessionStorage.getItem('video-stream-flag') === '' || sessionStorage.getItem('video-stream-flag') === null || sessionStorage.getItem('video-stream-flag') === undefined) {\n      navigate('/lobby');\n    }\n\n    this.setState({\n      videoStreamFlag: sessionStorage.getItem('video-stream-flag')\n    });\n    serverSocket.on('updated-video', data => {\n      if (data['pauseDetails']['username'] !== sessionStorage.getItem('username')) {\n        console.log('DATA:' + JSON.stringify(data['pauseDetails']));\n        this.setState({\n          playing: data['pauseDetails']['playing'],\n          secondsPlayed: data['pauseDetails']['progressTime'],\n          lastUpdatedBy: data['pauseDetails']['username']\n        });\n        this.state.videoPlayer.seekTo(data['pauseDetails']['progressTime'], 'seconds');\n\n        if (data['pauseDetails']['exited'] === true) {\n          navigate('/lobby');\n        }\n      }\n    });\n    createPeerConnection();\n  }\n\n  componentWillUnmount() {\n    if (this.state.lastUpdatedBy === sessionStorage.getItem('username')) {\n      let pauseDetails = {\n        'roomID': sessionStorage.getItem('room-id'),\n        'playing': false,\n        'progressTime': this.state.videoPlayer.getCurrentTime(),\n        'username': sessionStorage.getItem('username'),\n        'exited': true\n      };\n      serverSocket.emit('video-update', {\n        pauseDetails: pauseDetails\n      });\n      localStorage.removeItem('video_file');\n    }\n  }\n\n  render() {\n    const videoFileUrl = sessionStorage.getItem('video_file');\n    const {\n      playing\n    } = this.state;\n    const {\n      videoStreamFlag\n    } = this.state;\n    const userType = sessionStorage.getItem('user-type');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-wrapper\",\n        style: {\n          backgroundColor: 'black'\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          id: \"video-player\",\n          ref: this.handleRef,\n          playing: playing,\n          className: \"react-player fixed-bottom\",\n          url: videoFileUrl,\n          width: \"100%\",\n          height: \"100vh\",\n          controls: true,\n          onPause: this.vidOnPause,\n          onPlay: this.vidOnPlay,\n          onReady: this.ready\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/aravind/Documents/projects/Local-Video-Party-Client/client/src/components/VideoPlayer.jsx"],"names":["navigate","React","ReactPlayer","serverSocket","createPeerConnection","startPlaying","VideoPlayer","Component","constructor","props","vidOnPause","state","lastUpdatedBy","sessionStorage","getItem","pauseDetails","videoPlayer","getCurrentTime","emit","console","log","setState","playing","secondsPlayed","vidOnPlay","handleRef","player","ready","setTimeout","videoStreamFlag","videoPlayerRef","createRef","componentDidMount","undefined","on","data","JSON","stringify","seekTo","componentWillUnmount","localStorage","removeItem","render","videoFileUrl","userType","backgroundColor"],"mappings":"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","sourcesContent":["// TODO: got back to lobby when creator goes back--DONE\n// TODO: leave room\n// TODO: check file duration of all members\n// TODO: create a ready button for joinee\nimport { navigate } from '@reach/router'\nimport React from 'react'\nimport ReactPlayer from 'react-player'\nimport { serverSocket } from './helper/connection'\nimport {createPeerConnection, startPlaying} from './SimplePeer.js'\n\nexport default class VideoPlayer extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            playing: false,\n            secondsPlayed: 0,\n            lastUpdatedBy: sessionStorage.getItem('username'),\n            videoPlayer: null,\n            videoStreamFlag: true\n        }\n        this.videoPlayerRef = React.createRef()\n    }\n\n    componentDidMount(){\n        \n        if(sessionStorage.getItem('video-stream-flag') === '' || sessionStorage.getItem('video-stream-flag') === null || sessionStorage.getItem('video-stream-flag') === undefined){\n            navigate('/lobby')\n        }\n        this.setState({\n            videoStreamFlag: sessionStorage.getItem('video-stream-flag')\n        })\n        serverSocket.on('updated-video', (data) =>{\n            if(data['pauseDetails']['username'] !== sessionStorage.getItem('username')){\n                console.log('DATA:'+JSON.stringify(data['pauseDetails']))\n                this.setState({\n                    playing: data['pauseDetails']['playing'],\n                    secondsPlayed: data['pauseDetails']['progressTime'],\n                    lastUpdatedBy: data['pauseDetails']['username']\n                })\n                this.state.videoPlayer.seekTo(data['pauseDetails']['progressTime'], 'seconds')\n                if(data['pauseDetails']['exited'] === true){\n                    navigate('/lobby')\n                }\n            }\n        })\n        createPeerConnection()\n    }\n\n    componentWillUnmount(){\n        if (this.state.lastUpdatedBy === sessionStorage.getItem('username')){\n            let pauseDetails = {'roomID':sessionStorage.getItem('room-id'),'playing':false,'progressTime':this.state.videoPlayer.getCurrentTime(), 'username':sessionStorage.getItem('username'), 'exited':true}\n            serverSocket.emit('video-update',{pauseDetails:pauseDetails})\n            localStorage.removeItem('video_file')\n        }\n    }\n\n    vidOnPause=()=>{\n        if (this.state.lastUpdatedBy === sessionStorage.getItem('username')){\n            let pauseDetails = {'roomID':sessionStorage.getItem('room-id'), 'playing':false,'progressTime':this.state.videoPlayer.getCurrentTime(), 'username':sessionStorage.getItem('username'), 'exited':false}\n            serverSocket.emit('video-update',{pauseDetails:pauseDetails})\n            console.log('paused')\n        }\n\n        this.setState({\n            lastUpdatedBy: sessionStorage.getItem('username'),\n            playing: false,\n            secondsPlayed: this.state.videoPlayer.getCurrentTime()\n        })\n\n    }\n\n    vidOnPlay = () => {\n        if (this.state.lastUpdatedBy === sessionStorage.getItem('username')){\n            let pauseDetails = {'roomID':sessionStorage.getItem('room-id'), 'playing':true,'progressTime':this.state.videoPlayer.getCurrentTime(), 'username':sessionStorage.getItem('username'), 'exited':false}\n            serverSocket.emit('video-update',{pauseDetails:pauseDetails})\n            console.log('played')\n        }\n\n        this.setState({\n            lastUpdatedBy: sessionStorage.getItem('username'),\n            playing: true,\n            secondsPlayed: this.state.videoPlayer.getCurrentTime()\n        })\n    }\n\n    handleRef = (player) =>{\n\n        this.setState({videoPlayer:player})\n        \n        // if (sessionStorage.getItem(\"user-type\") === \"creator\"){\n        //     console.log(this.videoPlayerRef.current)\n        //     getLocalStream(this.videoPlayerRef.current);\n        // }\n        \n    }\n\n    ready = () => {\n        \n        if(sessionStorage.getItem('user-type') === \"creator\"){  \n            console.log(\"CREATING STREAM\")  \n            setTimeout(() => {startPlaying();}, 3000)\n        }\n    }\n    render(){\n        const videoFileUrl = sessionStorage.getItem('video_file')\n        const {playing} = this.state\n        const {videoStreamFlag} = this.state\n        const userType=sessionStorage.getItem('user-type')\n        \n        return(\n            \n            <div>\n                {/* {sessionStorage.getItem('user-type')===\"joinee\" && videoStreamFlag?<p>Stream video</p>:<p>Play local file</p>} */}\n                <div className='player-wrapper' style={{backgroundColor:'black'}}>\n                \n                <ReactPlayer\n                id=\"video-player\"\n                ref ={this.handleRef}\n                playing={playing}\n                className='react-player fixed-bottom'\n                url= {videoFileUrl}\n                width='100%'\n                height='100vh'\n                controls = {true}\n                onPause ={this.vidOnPause}\n                onPlay={this.vidOnPlay}\n                onReady={this.ready}\n                />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}